---
title: "Posterior Predictive Analysis of Functional Model"
format: html
server: shiny
---

## Model Exploration

```{r}
#| context: setup
#| include: false
library(readr)
library(plotly)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(glue)

inverse_link_function <- function(metric_type){
    if(metric_type == "gaussian"){
        return(function(x){x})
    }
    else if(metric_type == "poisson"){
        return(function(x){log(x)})
    }
    else if(metric_type == "binomial"){
        return(function(x){log(x/(1-x))})
    }
}

stat_function <- function(metric_numerator, metric_denominator, metric_type,data){
    inverse_link <- inverse_link_function(metric_type)
    cols_to_select <- c("age","id","stat_val")
    return(data |> mutate(stat_val = inverse_link(!!sym(metric_numerator)/!!sym(metric_denominator))) |> select(all_of(cols_to_select)) |> pivot_wider(names_from = "age", values_from = "stat_val", names_sort = T) |> pivot_longer(!id,names_to = "age") |> mutate(metric = metric_numerator))
}

all_stat_function <- function(metric_numerator_vec, metric_denominator_vec,metric_type_vec,data){
    mapply(stat_function, metric_numerator_vec, metric_denominator_vec,metric_type_vec,MoreArgs = list(data), SIMPLIFY = F) |> as.list() |> bind_rows()
}

plot_posterior <- function(player, functional_posterior, predictive_posterior, data){
    functional_player <- functional_posterior |> filter(player_name == player) |> mutate(age = as.numeric(age))
    predictive_player <- predictive_posterior |> filter(player_name == player) |> mutate(age = as.numeric(age))
    data_player <- data |> filter(name == player) |> mutate(age = as.numeric(age))

    p <- ggplot() + geom_line(aes(y=mean, x = age),data = predictive_player, colour="blue") + scale_linetype_manual(name = "Predicted") +
    geom_ribbon(aes(ymin=`hdi_3%`, ymax=`hdi_97%`, x = age), data = predictive_player,alpha=0.2, fill = "blue") + 
    geom_line(aes(y=mean, x = age), colour="green", data = functional_player) + scale_linetype_manual(name = "Functional") + 
    geom_ribbon(aes(ymin=`hdi_3%`, ymax=`hdi_97%`, x = age),data = functional_player, alpha=0.2, fill = "green") + 
    geom_point(aes(y = value, x = age), colour = "red", data = data_player) + scale_color_manual( name = "Observed") + 
    facet_wrap(~metric, scales = "free") + ggtitle(glue("Posterior: {player}"))
    return(p)
}
```

```{r}
#| context: data
#| include: false

player_data <- read_csv("data/player_data.csv") |> mutate(intercept = 1) |> filter( age <= 38)
player_id_map <- player_data |> select(name,id) |> distinct()
pca_data <- read_csv("data/pca_output.csv") |> mutate(name = player_id_map$name)
func_posterior <- read_csv("data/uncorrelated_metrics_functional_posterior.csv")  
pred_posterior <- read_csv("data/uncorrelated_metrics_predictive_posterior.csv")

metrics <- c("obpm","dbpm", 'blk',
 'stl',
 'ast',
 'dreb',
 'oreb',
 'tov',
 'ftm',
 'fg2m',
 'fg3m')

metric_denom <- c(rep("intercept",2), rep("minutes",6), "fta", "fg2a","fg3a")

metric_link <- c(rep("gaussian",2), rep("poisson",6), rep("binomial",3))

all_obs <- all_stat_function(metrics, metric_denom, metric_link, player_data)


```

```{r}
selectInput(
  "x",
  "X Axis",
  c("PC 1", "PC 2", "PC 3"),
)
selectInput(
  "y",
  "Y Axis",
  c("PC 2", "PC 1", "PC 3"),
)
plotlyOutput("pcaPlot")

selectizeInput("name", "Player Name", choices  = player_id_map |> select(name) )

plotOutput("posteriorPlot")
```

```{r}
#| context: server
output$pcaPlot <- renderPlotly({
  cols <- c(input$x, input$y,"name")
  p <- pca_data |> select(all_of(cols)) |> ggplot(aes(x = !!sym(input$x), y = !!sym(input$y), 
  label = name)) + geom_point(aes(alpha = .5)) + theme_classic() + ggtitle("Principal Components")
  ggplotly(p)
})

output$posteriorPlot <- renderPlot({
  plot_posterior(input$name,func_posterior,pred_posterior, player_id_map |> inner_join(all_obs))
})

```